{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "_You are currently looking at **version 1.1** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https://www.coursera.org/learn/python-data-analysis/resources/0dhYG) course resource._\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy.stats import ttest_ind"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 4 - Hypothesis Testing\n",
    "This assignment requires more individual learning than previous assignments - you are encouraged to check out the [pandas documentation](http://pandas.pydata.org/pandas-docs/stable/) to find functions or methods you might not have used yet, or ask questions on [Stack Overflow](http://stackoverflow.com/) and tag them as pandas and python related. And of course, the discussion forums are open for interaction with your peers and the course staff.\n",
    "\n",
    "Definitions:\n",
    "* A _quarter_ is a specific three month period, Q1 is January through March, Q2 is April through June, Q3 is July through September, Q4 is October through December.\n",
    "* A _recession_ is defined as starting with two consecutive quarters of GDP decline, and ending with two consecutive quarters of GDP growth.\n",
    "* A _recession bottom_ is the quarter within a recession which had the lowest GDP.\n",
    "* A _university town_ is a city which has a high percentage of university students compared to the total population of the city.\n",
    "\n",
    "**Hypothesis**: University towns have their mean housing prices less effected by recessions. Run a t-test to compare the ratio of the mean price of houses in university towns the quarter before the recession starts compared to the recession bottom. (`price_ratio=quarter_before_recession/recession_bottom`)\n",
    "\n",
    "The following data files are available for this assignment:\n",
    "* From the [Zillow research data site](http://www.zillow.com/research/data/) there is housing data for the United States. In particular the datafile for [all homes at a city level](http://files.zillowstatic.com/research/public/City/City_Zhvi_AllHomes.csv), ```City_Zhvi_AllHomes.csv```, has median home sale prices at a fine grained level.\n",
    "* From the Wikipedia page on college towns is a list of [university towns in the United States](https://en.wikipedia.org/wiki/List_of_college_towns#College_towns_in_the_United_States) which has been copy and pasted into the file ```university_towns.txt```.\n",
    "* From Bureau of Economic Analysis, US Department of Commerce, the [GDP over time](http://www.bea.gov/national/index.htm#gdp) of the United States in current dollars (use the chained value in 2009 dollars), in quarterly intervals, in the file ```gdplev.xls```. For this assignment, only look at GDP data from the first quarter of 2000 onward.\n",
    "\n",
    "Each function in this assignment below is worth 10%, with the exception of ```run_ttest()```, which is worth 50%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Use this dictionary to map state names to two letter acronyms\n",
    "states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "umich_part_id": "021",
    "umich_partlist_id": "004"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as py\n",
    "\n",
    "def get_list_of_university_towns():\n",
    "    with open('university_towns.txt') as univ_town:\n",
    "        state=[]\n",
    "        for line in univ_town:\n",
    "            state.append(line[:-1])\n",
    "        #print(state)\n",
    "\n",
    "        state_town=[]\n",
    "        for line in state:\n",
    "            if line[-6:] == '[edit]':\n",
    "                states = line[:-6]           # omits the last 6 chacters: [edit]\n",
    "                #print(states)\n",
    "            elif '(' in line:\n",
    "                towns=line[:(line.index('(')-1)]\n",
    "                state_town.append([states,towns])\n",
    "            else:\n",
    "                towns=line.rstrip()\n",
    "                state_town.append([states,towns])\n",
    "        ans = pd.DataFrame(state_town, columns = ['State','RegionName']) \n",
    "        return ans\n",
    "get_list_of_university_towns()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "umich_part_id": "022",
    "umich_partlist_id": "004"
   },
   "outputs": [],
   "source": [
    "def get_recession_start():\n",
    "    recess = pd.read_excel('gdplev.xls')\n",
    "    recess.columns\n",
    "    recess = recess[['Unnamed: 4','Unnamed: 5']]\n",
    "    recess.columns = ['Quarter','GDP']\n",
    "    recess = recess.iloc[219:]                  # filter on data from Q1 of 2000 onwards \n",
    "    recess = recess.reset_index()\n",
    "    recess = recess[['Quarter','GDP']]\n",
    "    #recess\n",
    "    #len(recess)\n",
    "    \n",
    "\n",
    "    recession_start = []\n",
    "    for i in range(len(recess) - 4): #looking at the 4 quarters on a given year: \n",
    "        if ((recess.iloc[i][1] > recess.iloc[i+1][1]) & (recess.iloc[i+1][1] > recess.iloc[i+2][1])): # recession starts \n",
    "            recession_start.append(recess.iloc[i][0])\n",
    "\n",
    "    ans = recession_start[0]\n",
    "    return ans\n",
    "get_recession_start()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "umich_part_id": "023",
    "umich_partlist_id": "004"
   },
   "outputs": [],
   "source": [
    "def get_recession_end():\n",
    "    recess = pd.read_excel('gdplev.xls')\n",
    "    recess.columns\n",
    "    recess = recess[['Unnamed: 4','Unnamed: 5']]\n",
    "    recess.columns = ['Quarter','GDP']\n",
    "    recess = recess.iloc[219:]                  # filter on data from Q1 of 2000 onwards \n",
    "    recess = recess.reset_index()\n",
    "    recess = recess[['Quarter','GDP']]\n",
    "    #recess\n",
    "    #len(recess)\n",
    "\n",
    "    recession_end = []\n",
    "    for i in range(len(recess) - 4): #looking at the 4 quarters on a given year: \n",
    "        if ((recess.iloc[i][1] > recess.iloc[i+1][1]) & (recess.iloc[i+1][1] > recess.iloc[i+2][1]) # recession starts\n",
    "        & (recess.iloc[i+2][1] < recess.iloc[i+3][1]) & (recess.iloc[i+3][1] < recess.iloc[i+4][1])): # recession ends \n",
    "            recession_end.append([recess.iloc[i][0],recess.iloc[i+1][0],recess.iloc[i+2][0],recess.iloc[i+3][0],recess.iloc[i+4][0]])\n",
    "\n",
    "    ans = recession_end[0][4]\n",
    "    return ans\n",
    "get_recession_end()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "umich_part_id": "024",
    "umich_partlist_id": "004"
   },
   "outputs": [],
   "source": [
    "def get_recession_bottom():\n",
    "    recess = pd.read_excel('gdplev.xls')\n",
    "    recess.columns\n",
    "    recess = recess[['Unnamed: 4','Unnamed: 5']]\n",
    "    recess.columns = ['Quarter','GDP']\n",
    "    recess = recess.iloc[219:]                  # filter on data from Q1 of 2000 onwards \n",
    "    recess = recess.reset_index()\n",
    "    recess = recess[['Quarter','GDP']]\n",
    "    #recess\n",
    "    #len(recess)\n",
    "\n",
    "    recession_end = []\n",
    "    for i in range(len(recess) - 4): #looking at the 4 quarters on a given year: \n",
    "        if ((recess.iloc[i][1] > recess.iloc[i+1][1]) & (recess.iloc[i+1][1] > recess.iloc[i+2][1]) # recession starts\n",
    "        & (recess.iloc[i+2][1] < recess.iloc[i+3][1]) & (recess.iloc[i+3][1] < recess.iloc[i+4][1])): # recession ends \n",
    "            recession_end.append([recess.iloc[i][0],recess.iloc[i+1][0],recess.iloc[i+2][0],recess.iloc[i+3][0],recess.iloc[i+4][0]])\n",
    "\n",
    "    ans = recession_end[0][2]\n",
    "    return ans\n",
    "get_recession_bottom()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "umich_part_id": "025",
    "umich_partlist_id": "004"
   },
   "outputs": [],
   "source": [
    "def convert_housing_data_to_quarters():\n",
    "    \n",
    "    housing_data = pd.read_csv('City_Zhvi_AllHomes.csv')\n",
    "    housing_data = housing_data.drop(housing_data.columns[[0]+list(range(3,51))],axis=1)\n",
    "    housing_data_2 = pd.DataFrame(housing_data[['State','RegionName']])\n",
    "    \n",
    "    states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}\n",
    "    \n",
    "    for year in range(2000,2016):\n",
    "        housing_data_2[str(year)+'q1'] = housing_data[[str(year)+'-01',str(year)+'-02',str(year)+'-03']].mean(axis=1)\n",
    "        housing_data_2[str(year)+'q2'] = housing_data[[str(year)+'-04',str(year)+'-05',str(year)+'-06']].mean(axis=1)\n",
    "        housing_data_2[str(year)+'q3'] = housing_data[[str(year)+'-07',str(year)+'-08',str(year)+'-09']].mean(axis=1)\n",
    "        housing_data_2[str(year)+'q4'] = housing_data[[str(year)+'-10',str(year)+'-11',str(year)+'-12']].mean(axis=1)\n",
    "        \n",
    "    year = 2016    \n",
    "    housing_data_2[str(year)+'q1'] = housing_data[[str(year)+'-01',str(year)+'-02',str(year)+'-03']].mean(axis=1)\n",
    "    housing_data_2[str(year)+'q2'] = housing_data[[str(year)+'-04',str(year)+'-05',str(year)+'-06']].mean(axis=1)\n",
    "    housing_data_2[str(year)+'q3'] = housing_data[[str(year)+'-07',str(year)+'-08']].mean(axis=1)\n",
    "    housing_data_2 = housing_data_2.replace({'State':states})\n",
    "    housing_data_2 = housing_data_2.set_index(['State','RegionName'])\n",
    "    return housing_data_2\n",
    "\n",
    "convert_housing_data_to_quarters()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "umich_part_id": "026",
    "umich_partlist_id": "004"
   },
   "outputs": [],
   "source": [
    "def run_ttest():\n",
    "    from scipy.stats import ttest_ind\n",
    "    \n",
    "    univ_town = get_list_of_university_towns()\n",
    "    recess_bottom = get_recession_bottom()\n",
    "    recess_start = get_recession_start()\n",
    "    housing_data = convert_housing_data_to_quarters()\n",
    "    bstart = housing_data.columns[housing_data.columns.get_loc(recess_start)-1] #auarter b4 recession\n",
    "    #bstart\n",
    "    \n",
    "    # create the ratio variable\n",
    "    housing_data['ratio'] =  housing_data[bstart] / housing_data[recess_bottom]\n",
    "    housing_data = housing_data[[recess_bottom, bstart, 'ratio']]\n",
    "    housing_data = housing_data.reset_index()\n",
    "    housing_data\n",
    "    \n",
    "    \n",
    "    univtowns_hdata = pd.merge(housing_data,univ_town,how='inner',on=['State','RegionName'])\n",
    "    univtowns_hdata['uni'] = True  # nice way to flag univ_town\n",
    "    \n",
    "    hdata2 = pd.merge(housing_data, univtowns_hdata, how='outer', on=['State','RegionName',recess_bottom, bstart, 'ratio'])\n",
    "    hdata2['uni'] = hdata2['uni'].fillna(False)\n",
    "    \n",
    "    university_town = hdata2[hdata2['uni'] == True] \n",
    "    non_university_town = hdata2[hdata2['uni'] == False]\n",
    "    \n",
    "    # run t-test \n",
    "    t,p = ttest_ind(university_town['ratio'].dropna(), non_university_town['ratio'].dropna())\n",
    "    \n",
    "    different = True if p<0.01 else False\n",
    "    better = \"university town\" if university_town['ratio'].mean() < non_university_town['ratio'].mean() else \"non-university town\"\n",
    "    return(different, p, better)\n",
    "\n",
    "run_ttest()\n"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "python-data-analysis",
   "graded_item_id": "Il9Fx",
   "launcher_item_id": "TeDW0",
   "part_id": "WGlun"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  },
  "umich": {
   "id": "Assignment 4",
   "version": "1.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
